PHP Toolkit

PHP helper classes that I might need to reuse

---

Util

  + string h (string $str, int $flags = ENT_QUOTES, string $encoding = 'UTF-8')
      convenience method for htmlspecialchars with default values

  + boolean isPost ()
      checks if current request was made by POST

  + void redirect (string $url, int $status_code = 302)
      redirects current request to $url with a default HTTP status code of 302
      writes HTML anchor tag if headers already sent
      exits process after redirecting

PDOPostgreSql

  + PDOPostgreSql (string $host, string $user, string $pass, string $name = null)
      creates the PDO object with the host, user, pass and database name specified
      database name is optional and if left out will create a connection without selecting a database
      you can select the database later using SQL

  - array select (string $sql, array $values = array(), boolean $use_cached = true)
      used to SELECT rows from the database that matches the SQL statement
      will return all matching rows in one go so this method is not advised if dealing with very large data sets
      $values is an optional ordered array to be used in conjunction with PDO's prepare and execute methods
      the array values replace question marks in the SQL statement to prevent SQL injections
      $use_cached allows for previously prepared SQL statements to be reused
      if $use_cached is set to false, then a new statement will always be prepared instead

  - int count (string $sql, array $values = array(), boolean $use_cached = true)
      used to count the number of rows selected from the database
      this is identical to the select method, but with a count() call on the end results
      parameters are identical to select method

  - int update (string $sql, array $values = array(), boolean $use_cached = true)
      used to execute a statement and count the number of affected rows after
      use with UPDATE, DELETE, CREATE TABLE and other such SQL statements
      parameters are identical to select method

Template

  + Template (string $path)

  - void setPath (string $path)
      throws Exception if $path is invalid

  - void assign (string $key, string $val = null)
      throws InvalidArgumentException if $key equals 'this'

  - void assignRef (string &$key, string &$val = null)
      throws InvalidArgumentException if $key equals 'this'

  - void clear (string $key = null)
      if $key is empty, clears all values

  - string output (boolean $ref = false)

  - void display (boolean $ref = false)
      echos output to client

Locale

  + string get (string $label)
      gets the locale string corresponding to $label in the specified locale file

  + void setSource (string $source)
      set the directory for locale files

  + void setParser (string $parser)
      set the function which parsers the language files and returns an associative array of values
      default is json_decode()

  + void setExtension (string $extension)
      set the file extension for language files
      default is 'json'

  + void setLanguage (string $language, string $default_language = null)
      set the language of the strings found in the locale file
      if $language is 'ja', the locale file should be: /path/to/source/ja.json
        (where source is /path/to/source/ and extension is json)
      $default_language is optional. it defaults to english (en) if the english locale file exists

ZipDirArchive extends ZipArchive

  - void addDirectory (string $path, string $localname = null)
      recursively adds a directory to the zip archive
      optional $localname for customising the path to the directory
      inside the archive
